from typing import Any, Optional, Dict, List, Union
import grpc
from pyproxypattern import Proxy
from {{ serv_name }}_pb.{{ serv_name }}_pb2_grpc import {{ serv_name | upper }}Stub


class Client(Proxy):
    __slots__ = ("url", "options", "channel", "xds_creds", "credentials", 'instance', 'compression', 'interceptors', '_callbacks', '_instance_check')
    url: Optional[str]
    options: Dict[str, Any]
    channel: Optional[grpc.Channel]
    instance: Optional[{{ serv_name | upper }}Stub]
    xds_creds: bool

    def __init__(self, *,
                 url: Optional[str] = None,
                 xds_creds: bool = False,
                 credentials: Optional[grpc.ChannelCredentials] = None,
                 compression: Optional[Any] = None,
                 interceptors: Optional[List[Union[grpc.UnaryUnaryClientInterceptor,
                                                   grpc.UnaryStreamClientInterceptor,
                                                   grpc.StreamUnaryClientInterceptor,
                                                   grpc.StreamStreamClientInterceptor]]] = None,
                 **options: Any) -> None:
        super().__init__()
        self.channel = None
        self.instance = None
        self.xds_creds = xds_creds
        self.credentials = credentials
        self.compression = compression
        self.interceptors = interceptors

        if options:
            self.options = options
        else:
            self.options = {}
        if url:
            self.url = url
            self.new_instance()
        else:
            self.url = None

    def new_instance(self) -> None:
        if not self.url:
            raise AttributeError("need url!")
        options = None
        opt = {}
        if self.url.startswith("dns:") or len(self.url.split(",")) > 1:
            opt["grpc.lb_policy_name"] = "round_robin"
        if self.options:
            opt.update(**self.options)
            options = [(k, v) for k, v in opt.items()]
        if self.xds_creds:
            fallback_creds = grpc.experimental.insecure_channel_credentials()
            channel_creds = grpc.xds_channel_credentials(fallback_creds)
            channel = grpc.secure_channel(self.url, channel_creds, compression=self.compression, options=options)
        else:
            if self.credentials:
                channel = grpc.secure_channel(self.url, self.credentials, compression=self.compression, options=options)
            else:
                channel = grpc.insecure_channel(self.url, compression=self.compression, options=options)
        # 注册拦截器
        if self.interceptors:
            self.channel = grpc.intercept_channel(channel, *self.interceptors)
        else:
            self.channel = channel
        client = {{ serv_name | upper }}Stub(self.channel)
        self.initialize(client)

    def initialize_from_url(self, url: str, *,
                            xds_creds: bool = False,
                            credentials: Optional[grpc.ChannelCredentials] = None,
                            compression: Optional[Any] = None,
                            interceptors: Optional[List[Union[grpc.UnaryUnaryClientInterceptor,
                                                              grpc.UnaryStreamClientInterceptor,
                                                              grpc.StreamUnaryClientInterceptor,
                                                              grpc.StreamStreamClientInterceptor]]] = None,
                            **options: Any) -> "Client":
        self.url = url
        if options:
            self.options.update(options)
        if credentials:
            self.credentials = credentials
        if compression:
            self.compression = compression
        self.xds_creds = xds_creds
        if interceptors:
            self.interceptors = interceptors
        self.new_instance()
        return self

    def close(self) -> None:
        if self.channel:
            self.channel.close()
            self.channel = None
            self.instance = None

    def __enter__(self) -> "Client":
        if not self.instance:
            self.new_instance()
        return self

    def __exit__(self, exc_type: Any, exc: Any, tb: Any) -> None:
        self.close()


sdk = Client()
