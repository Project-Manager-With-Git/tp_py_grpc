from pathlib import Path
from concurrent import futures
from typing import Any, Dict, Tuple, List
import grpc
from grpc_health.v1 import health
from grpc_health.v1 import health_pb2
from grpc_health.v1 import health_pb2_grpc
from grpc_reflection.v1alpha import reflection
from schema_entry import EntryPoint
from pyloggerhelper import log
from .handdler import Handdler
from .interceptor.timer import TimerInterceptor
from .pb import rpc_protos, rpc_services

_COMPRESSION_OPTIONS = {
    "none": grpc.Compression.NoCompression,
    "deflate": grpc.Compression.Deflate,
    "gzip": grpc.Compression.Gzip,
}


class Serv(EntryPoint):
    """grpc的服务端启动入口."""
    schema = {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "type": "object",
        "required": ["app_name", "address", "log_level"],
        "properties": {
            "app_version": {
                "type": "string",
                "title": "v",
                "description": "应用版本"
            },
            "app_name": {
                "type": "string",
                "title": "n",
                "description": "应用名",
                "default": "{{ app_name }}"
            },
            "address": {
                "type": "string",
                "title": "a",
                "description": "服务启动地址",
                "default": "0.0.0.0:5000"
            },
            "log_level": {
                "type": "string",
                "title": "l",
                "description": "log等级",
                "enum": ["DEBUG", "INFO", "WARN", "ERROR"],
                "default": "DEBUG"
            },
            "max_threads": {
                "type": "integer",
                "title": "t",
                "description": "单进程最大线程数",
                "default": 1000
            },
            "maximum_concurrent_rpcs": {
                "type": "integer",
                "title": "m",
                "description": "最大每秒接受并发数",
                "default": 50
            },
            "server_cert_path": {
                "type": "string",
                "description": "使用TLS时服务端的证书位置",
            },
            "server_key_path": {
                "type": "string",
                "description": "使用TLS时服务端证书的私钥位置",
            },
            "grpc_mode": {
                "type": "string",
                "description": "grpc的执行模式,分为`latency`(高响应),`blend`(均衡),`throughput`(高吞吐)",
                "enum": ["latency", "blend", "throughput"]
            },
            "max_rec_msg_size": {
                "type": "integer",
                "description": "允许接收的最大消息长度",
                "default": 1024 * 1024
            },
            "max_send_msg_size": {
                "type": "integer",
                "description": "允许发送的最大消息长度",
                "default": 1024 * 1024
            },
            "max_concurrent_streams": {
                "type": "integer",
                "description": "单连接最大并发量",
                "default": 100
            },
            "max_connection_idle": {
                "type": "integer",
                "description": "客户端连接的最大空闲时长(s)",
            },
            "max_connection_age": {
                "type": "integer",
                "description": "如果连接存活超过n则发送goaway",
            },
            "max_connection_age_grace": {
                "type": "integer",
                "description": "强制关闭连接之前允许等待的rpc在n秒内完成",
            },
            "keepalive_time": {
                "type": "integer",
                "description": "空闲连接每隔n秒ping一次客户端已确保连接存活",
            },
            "keepalive_timeout": {
                "type": "integer",
                "description": "ping时长超过n则认为连接已死",
            },
            "keepalive_enforement_permit_without_stream": {
                "type": "boolean",
                "description": "即使没有活动流也允许ping",
            },
            "compression": {
                "type": "string",
                "title": "z",
                "description": "使用哪种方式压缩发送的消息",
                "enum": ["deflate", "gzip"],
            },
            "xds": {
                "type": "boolean",
                "title": "x",
                "description": "是否使用xDSAPIs,使用xds模式则tls设置将失效",
                "default": False
            },
            "xds_creds": {
                "type": "boolean",
                "description": "是否使用xDSAPIs来接收TLS设置",
                "default": False
            },
            "xds_maintenance_port": {
                "type": "integer",
                "description": "maintenance服务的端口,如果不设置则使用当前服务端口",
            },
            "rpc_options": {
                "type": "array",
                "title": "o",
                "description": "grpc服务端的其他配置项",
                "items": {
                    "type": "string"
                }
            },
        }
    }

    def make_opts(self, config: Dict[str, Any]) -> List[Tuple[str, int]]:
        """构造grpc服务端的选项配置.

        Args:
            config (Dict[str, Any]): 服务的配置

        Returns:
            List[Tuple[str, int]]: 配置项
        """
        _opt = {
            'grpc.so_reuseport': 0
        }
        # grpc运行模式
        grpc_mode = config.get("grpc_mode")
        if grpc_mode:
            _opt.update({"grpc.optimization_target": grpc_mode})

        # 吞吐量
        max_rec_msg_size = config.get("max_rec_msg_size")
        if max_rec_msg_size:
            _opt.update({"grpc.max_receive_message_length": max_rec_msg_size})
        max_send_msg_size = config.get("max_send_msg_size")
        if max_send_msg_size:
            _opt.update({"grpc.max_send_message_length": max_send_msg_size})

        initial_window_size = config.get("initial_window_size")
        if initial_window_size:
            _opt.update({"grpc.http2.lookahead_bytes": initial_window_size})

        # 多路复用
        max_concurrent_streams = config.get("max_concurrent_streams")
        if max_concurrent_streams:
            _opt.update({"grpc.max_concurrent_streams": max_concurrent_streams})
        # keepalive
        max_connection_idle = config.get("max_connection_idle")
        if max_connection_idle:
            _opt.update({"grpc.max_connection_idle_ms": max_connection_idle * 1000})
        max_connection_age = config.get("max_connection_age")
        if max_connection_age:
            _opt.update({"grpc.max_connection_age_ms": max_connection_age * 1000})
        max_connection_age_grace = config.get("max_connection_age_grace")
        if max_connection_age_grace:
            _opt.update({"grpc.max_connection_age_grace_ms": max_connection_age_grace * 1000})
        keepalive_time = config.get("keepalive_time")
        if keepalive_time:
            _opt.update({"grpc.keepalive_time_ms": keepalive_time * 1000})
        keepalive_timeout = config.get("keepalive_timeout")
        if keepalive_timeout:
            _opt.update({"grpc.keepalive_timeout_ms": keepalive_timeout * 1000})
        keepalive_enforement_permit_without_stream = config.get("keepalive_enforement_permit_without_stream")
        if keepalive_enforement_permit_without_stream:
            _opt.update({"grpc.keepalive_permit_without_calls": 1 if keepalive_enforement_permit_without_stream else 0})
        # 其他配置
        rpc_options = config.get("rpc_options")
        if rpc_options:
            _opt.update({
                pair[0]: int(pair[1]) if pair[1].isdigit() else pair[1]
                for opt in rpc_options if len(pair := opt.split(":")) == 2
            })
        return [(k, v) for k, v in _opt.items()]

    def _config_ref_and_health_service(self, server: grpc.Server, max_threads: int) -> None:
        """配置指定服务的反射服务和健康检查服务.

        Args:
            server (grpc.Server): 要反射和健康检查的服务.
            max_threads (int): 健康检查服务的最大线程池大小.
        """
        health_servicer = health.HealthServicer(
            experimental_non_blocking=True,
            experimental_thread_pool=futures.ThreadPoolExecutor(
                max_workers=max_threads))
        services = tuple(
            service.full_name
            for service in rpc_protos.DESCRIPTOR.services_by_name.values()
        ) + (
            reflection.SERVICE_NAME,
            health.SERVICE_NAME
        )
        health_pb2_grpc.add_HealthServicer_to_server(health_servicer, server)
        for service in services:
            health_servicer.set(service, health_pb2.HealthCheckResponse.SERVING)
        reflection.enable_server_reflection(services, server)

    def common_serv(self, opts: List[Tuple[str, int]], handdler: Handdler, addr: str, compression: grpc.Compression, max_threads: int, maximum_concurrent_rpcs: int, *interceptors: grpc.ServerInterceptor) -> None:
        """普通服务程序入口.

        Args:
            opts (List[Tuple[str, int]]): grpc服务配置
            handdler (Handdler): grpc服务实现
            addr (str): grpc服务的启动地址
            compression (grpc.Compression): 传输数据压缩配置
            max_threads (int): grpc服务的线程池最大线程数
            maximum_concurrent_rpcs (int): 最大并发限制
            *interceptors  (grpc.ServerInterceptor): 服务端拦截器

        Raises:
            e: 执行报错
        """
        if interceptors:
            grpc_serv = grpc.server(
                futures.ThreadPoolExecutor(max_workers=max_threads),
                compression=compression,
                options=opts,
                maximum_concurrent_rpcs=maximum_concurrent_rpcs,
                interceptors=interceptors
            )
        else:
            grpc_serv = grpc.server(
                futures.ThreadPoolExecutor(max_workers=max_threads),
                compression=compression,
                options=opts,
                maximum_concurrent_rpcs=maximum_concurrent_rpcs
            )
        rpc_services.add_{{ serv_name | upper }}Servicer_to_server(handdler, grpc_serv)
        self._config_ref_and_health_service(grpc_serv, max_threads)

        # 设置tls
        if self.config.get("server_cert_path") and self.config.get("server_key_path"):
            log.info("use tls")
            server_cert_p = Path(self.config["server_cert_path"])
            server_key_p = Path(self.config["server_key_path"])
            try:
                with open(server_cert_p, 'rb') as f:
                    server_cert = f.read()
                with open(server_key_p, 'rb') as f:
                    server_key = f.read()
                server_credentials = grpc.ssl_server_credentials(((
                    server_key,
                    server_cert,
                ),))
                grpc_serv.add_secure_port(addr, server_credentials)
            except Exception as e:
                log.warn(f"tls load error", err=type(e), err_msg=str(e), exc_info=True, stack_info=True)
                # 回退到不设置tls
                grpc_serv.add_insecure_port(addr)
        # 不设置tls
        else:
            grpc_serv.add_insecure_port(addr)
        log.warn("grpc start", addr=addr)
        grpc_serv.start()
        try:
            grpc_serv.wait_for_termination()
        except KeyboardInterrupt:
            log.warn("grpc stoped")
        except Exception as e:
            raise e

    def _configure_maintenance_server(self, server: grpc.Server, hostname: str, maintenance_port: int, max_threads: int) -> None:
        """设置维护服务器.

        Args:
            server (grpc.Server): 将被设置为维护服务器的服务
            hostname (str): 部署域名或ip
            maintenance_port (int): 部署端口
            max_threads (int): 线程池最大线程数
        """
        listen_address = f"{hostname}:{maintenance_port}"
        server.add_insecure_port(listen_address)
        self._config_ref_and_health_service(server, max_threads)

    def _configure_grpc_server(self, server: grpc.Server, secure_mode: bool, handdler: Handdler, addr: str) -> None:
        """设置grpc业务服务.

        Args:
            server (grpc.Server): 将被设置为业务服务器的服务
            secure_mode (bool): 是否使用安全模式
            handdler (Handdler): 业务逻辑实现
            addr (str): 部署位置
        """
        # Add the application servicer to the server.
        rpc_services.add_{{ serv_name | upper }}Servicer_to_server(handdler, server)
        if not secure_mode:
            log.info("Running xDS Server")
            server.add_insecure_port(addr)
        else:
            # Use xDS credentials.
            log.info("Running with xDS Server credentials")
            # Fall back to insecure credentials.
            server_fallback_creds = grpc.insecure_server_credentials()
            server_creds = grpc.xds_server_credentials(server_fallback_creds)
            server.add_secure_port(addr, server_creds)

    def xds_serv(self, opts: List[Tuple[str, int]], handdler: Handdler, addr: str, compression: grpc.Compression, max_threads: int, maximum_concurrent_rpcs: int, *interceptors: grpc.ServerInterceptor) -> None:
        """xds服务.

        Args:
            opts (List[Tuple[str, int]]): grpc服务配置
            handdler (Handdler): grpc服务实现
            addr (str): grpc服务的启动地址
            compression (grpc.Compression): 传输数据压缩配置
            max_threads (int): grpc服务的线程池最大线程数
            maximum_concurrent_rpcs (int): 最大并发限制
            *interceptors  (grpc.ServerInterceptor): 服务端拦截器

        Raises:
            e: 执行报错
        """
        hostname, port_str = addr.split(":")
        port = int(port_str)
        xds_creds = self.config.get("xds_creds", False)
        maintenance_port = self.config.get("xds_maintenance_port") or int(port)
        if port == maintenance_port:
            maintenance_port = port + 1
        # Otherwise, start two different servers.
        if interceptors:
            grpc_server = grpc.server(
                futures.ThreadPoolExecutor(max_workers=max_threads),
                compression=compression,
                options=opts,
                maximum_concurrent_rpcs=maximum_concurrent_rpcs,
                interceptors=interceptors,
                xds=xds_creds)
        else:
            grpc_server = grpc.server(
                futures.ThreadPoolExecutor(max_workers=max_threads),
                compression=compression,
                options=opts,
                maximum_concurrent_rpcs=maximum_concurrent_rpcs,
                xds=xds_creds
            )
        self._configure_grpc_server(grpc_server, xds_creds, handdler, addr)
        grpc_server.start()
        maintenance_server = grpc.server(futures.ThreadPoolExecutor(max_workers=max_threads))
        self._configure_maintenance_server(maintenance_server, hostname, maintenance_port, max_threads)
        maintenance_server.start()
        log.info("grpc start", addr=addr, maintenance_port=maintenance_port)
        try:
            grpc_server.wait_for_termination()
            maintenance_server.wait_for_termination()
        except KeyboardInterrupt:
            log.warn("grpc stoped")
        except Exception as e:
            raise e

    def do_main(self) -> None:
        """服务程序入口."""
        config = self.config
        log.initialize_for_app(app_name=config.get("app_name"), log_level=config.get("log_level"))
        log.info("initialize app config ok", config=config)
        opts = self.make_opts(config)
        log.debug("initialize grpc options ok", opts=opts)
        handdler = Handdler(config)
        log.debug("initialize handdler ok")
        max_threads = self.config.get("max_threads", 1000)
        log.debug("initialize threads pool", max_threads=max_threads)
        maximum_concurrent_rpcs = self.config.get("maximum_concurrent_rpcs", 50)
        log.debug("initialize maximum concurrent rpcs", maximum_concurrent_rpcs=maximum_concurrent_rpcs)
        addr = self.config["address"]
        compression = _COMPRESSION_OPTIONS.get(self.config.get("compression"))
        log.debug("initialize compression config", compression=compression)
        if config.get("xds"):
            self.xds_serv(opts, handdler, addr, compression, max_threads, maximum_concurrent_rpcs, TimerInterceptor())
        else:
            self.common_serv(opts, handdler, addr, compression, max_threads, maximum_concurrent_rpcs, TimerInterceptor())
